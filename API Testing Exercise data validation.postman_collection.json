{
	"info": {
		"_postman_id": "9ca2bc48-6ec3-4119-8ec5-25cc8fffc29e",
		"name": "API Testing Exercise data validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16689665"
	},
	"item": [
		{
			"name": "Gender API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var textData = pm.response.text();\r",
							"var genderRes = \"\";\r",
							"var nameRes = \"\";\r",
							"var testResponseBody = pm.collectionVariables.get(\"genderResponse\");\r",
							"\r",
							"pm.test(\"Gender API status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    //body\r",
							"    pm.test(\"Gender API response body is present\", function () {\r",
							"        pm.expect(jsonData).is.not.empty;\r",
							"\r",
							"        //param \"count\"\r",
							"        pm.test(\"Gender API response param 'count' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"count\");\r",
							"\r",
							"            pm.test(\"Gender API param 'count' is not null\", function () {\r",
							"                pm.expect(jsonData.count).is.not.null;\r",
							"\r",
							"                pm.test(\"Gender API param 'count' is a number\", function () {\r",
							"                    pm.expect(jsonData.count).to.be.a(\"number\");\r",
							"\r",
							"                    pm.test(\"Gender API param 'count' has right value\", function () {\r",
							"                        pm.expect(jsonData.count).to.eql(testResponseBody.count);\r",
							"\r",
							"                    });\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"name\"\r",
							"        pm.test(\"Gender API response param 'name' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"name\");\r",
							"\r",
							"            pm.test(\"Gender API response param 'name' is not null\", function () {\r",
							"                pm.expect(jsonData.name).is.not.null;\r",
							"\r",
							"                pm.test(\"Gender API response param 'name' is a string\", function () {\r",
							"                    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"\r",
							"                    nameRes = jsonData.name;\r",
							"                    pm.test(\"Gender API param 'name' has right value\", function () {\r",
							"                        pm.expect(jsonData.name).to.eql(testResponseBody.name);\r",
							"\r",
							"                    });\r",
							"                });\r",
							"            });\r",
							"\r",
							"        });\r",
							"\r",
							"        //param \"gender\"\r",
							"        pm.test(\"Gender API response param 'gender' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"gender\");\r",
							"\r",
							"            pm.test(\"Gender API response param 'gender' is not null\", function () {\r",
							"                pm.expect(jsonData.gender).is.not.null;\r",
							"\r",
							"                pm.test(\"Gender API response param 'gender' is male/female\", function () {\r",
							"                    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
							"\r",
							"                    genderRes = jsonData.gender;\r",
							"                    pm.test(\"Gender API param 'gender' has right value\", function () {\r",
							"                        pm.expect(jsonData.gender).to.eql(testResponseBody.gender);\r",
							"\r",
							"                    });\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"probability\"\r",
							"        pm.test(\"Gender API response param 'probability' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"probability\");\r",
							"\r",
							"            pm.test(\"Gender API response param 'probability' is not null\", function () {\r",
							"                pm.expect(jsonData.probability).is.not.null;\r",
							"\r",
							"                pm.test(\"Gender API response param 'probability' is a number\", function () {\r",
							"                    pm.expect(jsonData.probability).to.be.a(\"number\");\r",
							"\r",
							"                    pm.test(\"Gender API param 'probability' has right value\", function () {\r",
							"                        pm.expect(jsonData.probability).to.eql(testResponseBody.probability);\r",
							"\r",
							"                    });\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"\r",
							"    //header\r",
							"    pm.test(\"Gender API header is present\", function () {\r",
							"\r",
							"        //param \"content-Type\"\r",
							"        pm.test(\"Gender API header param 'content-Type' is present\", function () {\r",
							"            pm.response.to.have.header(\"content-Type\");\r",
							"\r",
							"            pm.test(\"Gender API header param 'content-Type' is right\", function () {\r",
							"                pm.expect(pm.response.headers.get('content-type')).to.include(\"application/json\");\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-limit\"\r",
							"        pm.test(\"Gender API header param 'x-rate-limit-limit' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-limit\");\r",
							"\r",
							"            pm.test(\"Gender API header param 'x-rate-limit-limit' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-limit')).is.not.null\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-remaining\"\r",
							"        pm.test(\"Gender API header param 'x-rate-limit-remaining' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-remaining\");\r",
							"\r",
							"            pm.test(\"Gender API header param 'x-rate-limit-remaining' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-remaining')).is.not.null\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-reset\"\r",
							"        pm.test(\"Gender API header param 'x-rate-limit-reset' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-reset\");\r",
							"\r",
							"            pm.test(\"Gender API header param 'x-rate-limit-reset' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-reset')).is.not.null\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-request-id\"\r",
							"        pm.test(\"Gender API header param 'x-request-id' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-request-id\");\r",
							"\r",
							"            pm.test(\"Gender API header param 'x-request-id' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-request-id')).is.not.null\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"console.log(nameRes + \" is \" + genderRes);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.genderize.io/?name={{name}}",
					"protocol": "https",
					"host": [
						"api",
						"genderize",
						"io"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Age API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var textData = pm.response.text();\r",
							"var ageRes = \"\";\r",
							"var nameRes = \"\";\r",
							"var testResponseBody = pm.collectionVariables.get(\"ageResponse\");\r",
							"\r",
							"pm.test(\"Age API status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    //body\r",
							"    pm.test(\"Age API response body is present\", function () {\r",
							"        pm.expect(jsonData).is.not.empty;\r",
							"\r",
							"        //param \"count\"\r",
							"        pm.test(\"Age API response param 'count' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"count\");\r",
							"\r",
							"            pm.test(\"Age API response param 'count' is not null\", function () {\r",
							"                pm.expect(jsonData.count).is.not.null;\r",
							"\r",
							"                pm.test(\"Age API response param 'count' is a number\", function () {\r",
							"                    pm.expect(jsonData.count).to.be.a(\"number\");\r",
							"\r",
							"                    pm.test(\"Gender API param 'count' has right value\", function () {\r",
							"                        pm.expect(jsonData.count).to.eql(testResponseBody.count);\r",
							"\r",
							"                    });\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"name\"\r",
							"        pm.test(\"Age API response param 'name' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"name\");\r",
							"\r",
							"            pm.test(\"Age API response param 'name' is not null\", function () {\r",
							"                pm.expect(jsonData.name).is.not.null;\r",
							"\r",
							"                pm.test(\"Age API response param 'name' is a string\", function () {\r",
							"                    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"\r",
							"                    pm.test(\"Gender API param 'name' has right value\", function () {\r",
							"                        pm.expect(jsonData.name).to.eql(testResponseBody.name);\r",
							"\r",
							"                    });\r",
							"                });\r",
							"\r",
							"                nameRes = jsonData.name;\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"age\"\r",
							"        pm.test(\"Age API response param 'age' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"age\");\r",
							"\r",
							"            pm.test(\"Age API response param 'age' is not null\", function () {\r",
							"                pm.expect(jsonData.age).is.not.null;\r",
							"\r",
							"                pm.test(\"Age API response param 'age' is a number\", function () {\r",
							"                    pm.expect(jsonData.age).to.be.a(\"number\")\r",
							"\r",
							"                    ageRes = jsonData.age;\r",
							"\r",
							"                    pm.test(\"Gender API param 'age' has right value\", function () {\r",
							"                        pm.expect(jsonData.age).to.eql(testResponseBody.age);\r",
							"\r",
							"                    });\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"\r",
							"    //header\r",
							"    pm.test(\"Age API header is present\", function () {\r",
							"\r",
							"        //param \"content-Type\"\r",
							"        pm.test(\"Age API header param 'content-Type' is present\", function () {\r",
							"            pm.response.to.have.header(\"content-Type\");\r",
							"\r",
							"            pm.test(\"Age API header param 'content-Type' is right\", function () {\r",
							"                pm.expect(pm.response.headers.get('content-type')).to.include(\"application/json\");\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-limit\"\r",
							"        pm.test(\"Age API header param 'x-rate-limit-limit' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-limit\");\r",
							"\r",
							"            pm.test(\"Age API header param 'x-rate-limit-limit' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-limit')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-remaining\"\r",
							"        pm.test(\"Age API header param 'x-rate-limit-remaining' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-remaining\");\r",
							"\r",
							"            pm.test(\"Age API header param 'x-rate-limit-remaining' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-remaining')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-reset\"\r",
							"        pm.test(\"Age API header param 'x-rate-limit-reset' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-reset\");\r",
							"\r",
							"            pm.test(\"Age API header param 'x-rate-limit-reset' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-reset')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-request-id\"\r",
							"        pm.test(\"Age API header param 'x-request-id' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-request-id\");\r",
							"\r",
							"            pm.test(\"Age API header param 'x-request-id' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-request-id')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"\r",
							"    console.log(nameRes + \" is \" + ageRes);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.agify.io/?name={{name}}",
					"protocol": "https",
					"host": [
						"api",
						"agify",
						"io"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Nation API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var textData = pm.response.text();\r",
							"var nationRes = \"\";\r",
							"var nameRes = \"\";\r",
							"var testResponseBody = pm.collectionVariables.get(\"nationResponse\");\r",
							"//Api\r",
							"pm.test(\"Nation API status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.test(\"Nation API response body is present\", function () {\r",
							"        pm.expect(jsonData).is.not.empty;\r",
							"\r",
							"        //param \"count\"\r",
							"        pm.test(\"Nation API response array 'count' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"count\");\r",
							"            pm.test(\"Nation API response array 'count' is not null\", function () {\r",
							"                pm.expect(jsonData.count).is.not.null;\r",
							"\r",
							"                pm.test(\"Gender API param 'count' has right value\", function () {\r",
							"                    pm.expect(jsonData.count).to.eql(testResponseBody.count);\r",
							"\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"name\"\r",
							"        pm.test(\"Nation API response array 'name' is present\", function () {\r",
							"            pm.expect(textData).to.include(\"name\");\r",
							"\r",
							"            pm.test(\"Nation API response array 'name' is not null\", function () {\r",
							"                pm.expect(jsonData.name).is.not.null;\r",
							"\r",
							"                nameRes = jsonData.name;\r",
							"\r",
							"                pm.test(\"Gender API param 'name' has right value\", function () {\r",
							"                    pm.expect(jsonData.name).to.eql(testResponseBody.name);\r",
							"\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //array \"country\"\r",
							"        pm.test(\"Nation API response array 'country' is not null\", function () {\r",
							"            pm.expect(jsonData.country).not.empty;\r",
							"\r",
							"            var countryText = JSON.stringify(jsonData.country);\r",
							"\r",
							"            //param \"country.country_id\"\r",
							"            pm.test(\"Nation API response param 'country.country_id' is present\", function () {\r",
							"                pm.expect(countryText).to.include('country_id');\r",
							"\r",
							"                for (let i = 0; i < jsonData.country.length; i++) {\r",
							"\r",
							"                    pm.test(\"Response param 'country[\" + i + \"].country_id' is a string\", function () {\r",
							"                        pm.expect(jsonData.country[i].country_id).is.not.null;\r",
							"\r",
							"                        pm.test(\"Response param 'country[\" + i + \"].country_id' is a string\", function () {\r",
							"                            pm.expect(jsonData.country[i].country_id).to.be.a('string');\r",
							"\r",
							"                            pm.test(\"Gender API param 'country[\" + i + \"].country_id' has right value\", function () {\r",
							"                                pm.expect(jsonData.country[i].country_id).to.eql(testResponseBody.country[i].country_id);\r",
							"\r",
							"                            });\r",
							"                        });\r",
							"                    });\r",
							"                }\r",
							"            });\r",
							"\r",
							"            //param \"country.probability\"\r",
							"            pm.test(\"Nation API response param 'country.probability' is present\", function () {\r",
							"                pm.expect(countryText).to.include('probability');\r",
							"\r",
							"                for (let i = 0; i < jsonData.country.length; i++) {\r",
							"                    pm.test(\"Response param 'country[\" + i + \"].probability' is not null\", function () {\r",
							"                        pm.expect(jsonData.country[i].probability).is.not.null;\r",
							"\r",
							"                        pm.test(\"Response param 'country[\" + i + \"].probability' is a number\", function () {\r",
							"                            pm.expect(jsonData.country[i].probability).to.be.a('number');\r",
							"\r",
							"                            pm.test(\"Gender API param 'country[\" + i + \"].probability' has right value\", function () {\r",
							"                                pm.expect(jsonData.country[i].probability).to.eql(testResponseBody.country[i].probability);\r",
							"\r",
							"                            });\r",
							"                        });\r",
							"                    });\r",
							"                }\r",
							"\r",
							"                //check if data is sorted \r",
							"                pm.test(\"Nation API response param 'country.probability' is sorted\", function () {\r",
							"\r",
							"                    var sorted = jsonData.country.sort((a, b) => a[1] - b[1])\r",
							"                    pm.expect(jsonData.country).to.eql(sorted);\r",
							"\r",
							"                    nationRes = jsonData.country[0].country_id;\r",
							"                    console.log(nameRes + \" is from \" + nationRes);;\r",
							"\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"\r",
							"    //header\r",
							"    pm.test(\"Nation API header is present\", function () {\r",
							"\r",
							"        //param \"content-Type\"\r",
							"        pm.test(\"Nation API header param 'content-Type' is present\", function () {\r",
							"            pm.response.to.have.header(\"content-Type\");\r",
							"\r",
							"            pm.test(\"Nation API header param 'content-Type' is right\", function () {\r",
							"                pm.expect(pm.response.headers.get('content-type')).to.include(\"application/json\");\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-limit\"\r",
							"        pm.test(\"Nation API header param 'x-rate-limit-limit' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-limit\");\r",
							"\r",
							"            pm.test(\"Nation API header param 'x-rate-limit-limit' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-limit')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-remaining\"\r",
							"        pm.test(\"Nation API header param 'x-rate-limit-remaining' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-remaining\");\r",
							"\r",
							"            pm.test(\"Nation API header param 'x-rate-limit-remaining' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-remaining')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-rate-limit-reset\"\r",
							"        pm.test(\"Nation API header param 'x-rate-limit-reset' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-rate-limit-reset\");\r",
							"\r",
							"            pm.test(\"Nation API header param 'x-rate-limit-reset' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-rate-limit-reset')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							"        //param \"x-request-id\"\r",
							"        pm.test(\"Nation API header param 'x-request-id' is present\", function () {\r",
							"            pm.response.to.have.header(\"x-request-id\");\r",
							"\r",
							"            pm.test(\"Nation API header param 'x-request-id' is not null\", function () {\r",
							"                pm.expect(pm.response.headers.get('x-request-id')).is.not.null;\r",
							"\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nationalize.io/?name={{name}}",
					"protocol": "https",
					"host": [
						"api",
						"nationalize",
						"io"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.globals.set(\"testBody\", JSON.stringify(pm.iterationData.toObject()));\r",
					"var testData = JSON.parse(pm.globals.get(\"testBody\"));\r",
					"\r",
					"pm.globals.set(\"name\", testData.name);\r",
					"\r",
					"pm.collectionVariables.set(\"genderResponse\",testData.genderResponse);\r",
					"pm.collectionVariables.set(\"ageResponse\", testData.ageResponse);\r",
					"pm.collectionVariables.set(\"nationResponse\", testData.nationResponse);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "\"\"",
			"type": "string"
		},
		{
			"key": "genderResponse",
			"value": ""
		},
		{
			"key": "ageResponse",
			"value": ""
		},
		{
			"key": "nationResponse",
			"value": ""
		}
	]
}